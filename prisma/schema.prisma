// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  uid             String   @unique
  email           String   @unique
  name            String
  username        String?   @unique
  avatar          String?
  bio             String?
  verification    Boolean @default(false)
  address         Address?
  posts           Content[]
  shared          Shared[]
  like            Likes[]
  views           Views[]
  comments        Comments[]
  mentions        Mentions[]
  refreshtokens   Refreshtoken[]
  followers       Follows[]       @relation("following")        
  following       Follows[]       @relation("follower")        
  createdAt       DateTime        @default(now())
  updatedAt       DateTime?       @updatedAt
}

model Follows {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  status      StatusFollow    @default(pending)
  follower    Users           @relation("follower", fields: [followerId], references: [id])
  followerId  String          @db.ObjectId
  followingId String          @db.ObjectId
  following   Users           @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
}

model Refreshtoken {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  hashedToken String
  userId      String            @db.ObjectId
  user        Users             @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime?         @updatedAt
}

model Content {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  file          Files[]
  music         Music?    @relation(fields: [musicId], references: [id])
  musicId       String?   @db.ObjectId
  startPosition String?
  stopPosition  String?
  categoryId    String    @db.ObjectId
  category      Category  @relation(fields: [categoryId], references: [id])
  caption       String
  typepost      TypePost  @default(pic)
  author        Users     @relation(fields: [authorId], references: [id])
  authorId      String    @db.ObjectId
  likes         Likes[]
  share         Shared[]
  view          Views[]
  comments      Comments[]
  mentions      Mentions[]
  long          String?
  lat           String?
  sell          TypeSell        @default(ready)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
}

model Mentions {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  post        Content         @relation(fields: [postId], references: [id])
  postId      String          @db.ObjectId
  user        Users           @relation(fields: [userId], references: [id])
  userId      String          @db.ObjectId
  
}

model Music {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  file      String?
  name      String
  cover     String?
  artist    String?
  pictures  Content[]
}

model Files {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  file      String
  height    Int?
  width     Int?
  type      String?
  post      Content  @relation(fields: [postId], references: [id])
  postId    String    @db.ObjectId
}

model Shared {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  post      Content   @relation(fields: [postId], references: [id])
  postId    String    @db.ObjectId
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
}

model Likes {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  post      Content   @relation(fields: [postId], references: [id])
  postId    String    @db.ObjectId
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
}

model Views {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  post      Content   @relation(fields: [postId], references: [id])
  postId    String    @db.ObjectId
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
}

model Comments {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  post      Content   @relation(fields: [postId], references: [id])
  postId    String    @db.ObjectId
  author    Users     @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  post        Content[]
}

type Address {
  street String
  city   String
  state  String
  zip    String
}

enum TypePost {
  pic
  story
  video
}

enum TypeSell {
  sold
  ready
}


enum StatusFollow {
  pending
  accepted
  reject
}